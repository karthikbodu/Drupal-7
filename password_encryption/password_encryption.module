<?php

/**
 * @file
 * User password encryption.
 */

// Included file for using password api functions.
include_once 'includes/password.inc';

/**
 * Implements hook_menu().
 */
function password_encryption_menu() {

  $items = array();
  $items['user/encrypt-password'] = array(
    'title' => 'Password Encryption',
    'description' => 'Password Encryption',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('password_encryption_form'),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $items['admin/config/people/password/encrypt'] = array(
    'title' => 'Password Encryption',
    'description' => 'Password Encryption',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('password_encryption_form'),
    'access arguments' => array('administer password encryption'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function password_encryption_permission() {
  return array(
    'administer password encryption' => array(
      'title' => t('Administer Password Encryption'),
      'description' => t('Administer Password Encryption'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function password_encryption_form_user_login_block_alter(&$form, &$form_state, $form_id) {
  unset($form['links']);
  drupal_add_css('#user-login-form ul li a {margin-right:5px;}', array('type' => 'inline'));
  $items = array();
  if (variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)) {
    $items[] = l(t('Create new account'), 'user/register', array('attributes' => array('title' => t('Create a new user account.'))));
  }
  $items[] = l(t('Request new password'), 'user/password', array('attributes' => array('title' => t('Request new password via e-mail.'))));
  $items[] = l(t('Password Encryption'), 'user/encrypt-password', array('attributes' => array('title' => t('Generate encrypted password.'))));
  $form['links'] = array('#markup' => theme('item_list', array('items' => $items)));
}

/**
 * Builds a form with a field to accept the user text.
 *
 * Generates encrypted password.
 */
function password_encryption_form($form, &$form_state) {
  $form = array();
  $form['generate_hash'] = array(
    '#type' => 'fieldset',
    '#title' => t('Password Encryption'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['generate_hash']['original_pass'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Enter password to be encrypted'),
    '#requied' => TRUE,
  );
  $form['generate_hash']['get_hash'] = array(
    '#type' => 'button',
    '#value' => t('Generate'),
    '#ajax' => array(
      'callback' => 'password_encryption_generate',
      'wrapper' => 'password-hash',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  $form['generate_hash']['encrypted_pass'] = array(
    '#markup' => '',
    '#prefix' => '<div id="password-hash">',
    '#suffix' => '</div>',
  );

  return $form;
}

/**
 * Function to generate the encrypted password.
 */
function password_encryption_generate($form, &$form_state) {
  $validations = drupal_get_messages('error', FALSE);
  $form['generate_hash']['encrypted_pass']['#markup'] = '';
  $form['generate_hash']['encrypted_pass']['#prefix'] = '<div id="password-hash">';
  if (!array_key_exists('error', $validations)) {
    $password_hash = user_hash_password($form_state['values']['original_pass']);
    $form['generate_hash']['encrypted_pass']['#markup'] = $password_hash;
    $form['generate_hash']['encrypted_pass']['#prefix'] = '<div id="password-hash" style="margin-top:1em;"><label for="edit-encrypted-pass">Encrypted Password :</label>';
  }
  return $form['generate_hash']['encrypted_pass'];
}
